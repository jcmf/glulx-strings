doctype html
html(lang='en')
  head
    title= package.name
    style
      :stylus
        body
          margin 0
          color black
          background-color white
        #strings
          margin 0
          font-family Consolas, Monaco, "Lucida Console", monospace
        .string
          white-space pre-wrap
          padding 0.2em 0.5em
          border-bottom 1px dotted #eee
          &:hover
            background-color #eee
        #ui
          max-width 30em
          margin 0.5em auto
          font-family sans-serif
        #input-div, .status
          margin 0
          padding 0.5em
          border-bottom 1px solid black
        #input-div
          border-top 1px solid black
          background-color #ddd
        #loading
          background-color #cfc
        #failed
          background-color #fcc
        h1
          margin-bottom 0
        .version
          font-size small
          font-style italic
          margin-top 0.5em
        p
          line-height 1.2
    script
      :coffeescript
        {extract_strings} = require '.'
        $ = require 'jquery'
        $ ->
          $('a').attr 'target', '_blank'
          $loading = $ '#loading'
          $failed = $ '#failed'
          $strings = $ '#strings'
          loadFiles = (files) ->
            if not files then return
            $loading.show()
            $failed.hide()
            $strings.empty()
            for file in files
              reader = new FileReader()
              reader.onloadend = ->
                bytes = new Uint8Array reader.result
                found = false
                extract_strings bytes, (s, data_addr, code_addr) ->
                  if not s = s.trimRight() then return
                  $string = $ '<div class="string">'
                  $string.text s
                  $strings.append $string
                  found = true
                if not found then $failed.show()
                $loading.hide()
              reader.readAsArrayBuffer file
            return
          $input = $ '#input'
          $input.on 'change', -> loadFiles $input.get(0).files
          $body = $ 'body'
          dragDropFiles = (e) ->
            if files = e.originalEvent?.dataTransfer?.files
              e.stopPropagation()
              e.preventDefault()
            return files
          $body.on 'dragenter dragover', dragDropFiles
          $body.on 'drop', (e) -> loadFiles dragDropFiles e
  body
    #strings
    #ui
      #input-div
        input#input(type='file')
      #loading.status(style='display: none').
        Working....
      #failed.status(style='display: none').
        Sorry, I don't understand this file.
      #text
        h1= package.name
        .version version #{package.version}
        :markdown
          This program extracts text from Glulx or Z-code files,
          such as interactive fiction or text adventure games created
          by the Inform compiler.  It also knows about TADS 2 and
          3, and can look inside Blorb and ZIP files.

          To use it, drag a `.gblorb`, `.zblorb`, `.t3`, `.z5`,
          `.z8`, `.gam`, `.ulx`, `.zip`, or other story file from
          your computer onto these words, or click the button above
          to open a file chooser.  Note that the results will not
          be perfect: some meaningless strings of letters may also
          appear, and some in-game text might not appear.

          This program does not use or require a network connection.
          Ask your browser to save this page as an `.html` file to
          make it easier to use offline.

          For more information about what this is for and how it
          works, see the [GitHub repository](#{package.homepage}).
